{
  "name": "Patient Forms API with Error Handling",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "patient-screener",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "patient-screener-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-required-contact-fields",
              "leftValue": "={{ $json.contact && $json.contact.name && $json.contact.email && $json.contact.gender && $json.contact.dateOfBirth && $json.contact.phone }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "has-required-form-fields",
              "leftValue": "={{ $json.form && $json.form.formType && $json.form.category && $json.form.screener && $json.form.timestamp }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "has-required-clinic-fields",
              "leftValue": "={{ $json.clinic && $json.clinic.name && $json.clinic.id && $json.clinic.email && $json.clinic.phone }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-check",
      "name": "Validation Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Validation Failed\", \"message\": \"Missing required fields\", \"missingFields\": {{ $json.missingFields || [] }}, \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract missing fields for detailed error reporting\nconst data = $input.first().json;\nconst missingFields = [];\n\n// Check contact fields\nif (!data.contact) {\n  missingFields.push('contact');\n} else {\n  if (!data.contact.name) missingFields.push('contact.name');\n  if (!data.contact.email) missingFields.push('contact.email');\n  if (!data.contact.gender) missingFields.push('contact.gender');\n  if (!data.contact.dateOfBirth) missingFields.push('contact.dateOfBirth');\n  if (!data.contact.phone) missingFields.push('contact.phone');\n}\n\n// Check form fields\nif (!data.form) {\n  missingFields.push('form');\n} else {\n  if (!data.form.formType) missingFields.push('form.formType');\n  if (!data.form.category) missingFields.push('form.category');\n  if (!data.form.screener) missingFields.push('form.screener');\n  if (!data.form.timestamp) missingFields.push('form.timestamp');\n}\n\n// Check clinic fields\nif (!data.clinic) {\n  missingFields.push('clinic');\n} else {\n  if (!data.clinic.name) missingFields.push('clinic.name');\n  if (!data.clinic.id) missingFields.push('clinic.id');\n  if (!data.clinic.email) missingFields.push('clinic.email');\n  if (!data.clinic.phone) missingFields.push('clinic.phone');\n}\n\nreturn {\n  json: {\n    ...data,\n    missingFields,\n    validationTimestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "extract-missing-fields",
      "name": "Extract Missing Fields",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 100]
    },
    {
      "parameters": {
        "jsCode": "// Data sanitization and validation\nconst data = $input.first().json;\n\n// Sanitize string fields\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') return str;\n  return str.trim().replace(/[<>\"'&]/g, '');\n}\n\n// Validate email format\nfunction isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// Validate date format (YYYY-MM-DD)\nfunction isValidDate(dateString) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(dateString)) return false;\n  const date = new Date(dateString);\n  return date instanceof Date && !isNaN(date);\n}\n\n// Validate phone number (basic validation)\nfunction isValidPhone(phone) {\n  const phoneRegex = /^[\\d\\s\\-\\+\\(\\)]{10,}$/;\n  return phoneRegex.test(phone.replace(/\\s/g, ''));\n}\n\n// Process contact data\nif (data.contact) {\n  data.contact.name = sanitizeString(data.contact.name);\n  data.contact.email = sanitizeString(data.contact.email).toLowerCase();\n  data.contact.gender = sanitizeString(data.contact.gender).toLowerCase();\n  data.contact.phone = sanitizeString(data.contact.phone);\n  \n  if (data.contact.address1) data.contact.address1 = sanitizeString(data.contact.address1);\n  if (data.contact.city) data.contact.city = sanitizeString(data.contact.city);\n  if (data.contact.state) data.contact.state = sanitizeString(data.contact.state);\n  if (data.contact.postalCode) data.contact.postalCode = sanitizeString(data.contact.postalCode);\n  if (data.contact.timezone) data.contact.timezone = sanitizeString(data.contact.timezone);\n}\n\n// Process patient data\nif (data.patient) {\n  if (data.patient.patientId) data.patient.patientId = sanitizeString(data.patient.patientId);\n  if (data.patient.contactId) data.patient.contactId = sanitizeString(data.patient.contactId);\n  if (data.patient.rxRequested) data.patient.rxRequested = sanitizeString(data.patient.rxRequested);\n  if (data.patient.height) data.patient.height = sanitizeString(data.patient.height);\n  if (data.patient.weight) data.patient.weight = sanitizeString(data.patient.weight);\n  if (data.patient.BMI) data.patient.BMI = sanitizeString(data.patient.BMI);\n  if (data.patient.pregnancy) data.patient.pregnancy = sanitizeString(data.patient.pregnancy).toLowerCase();\n  if (data.patient.allergies) data.patient.allergies = sanitizeString(data.patient.allergies);\n  if (data.patient.activityLevel) data.patient.activityLevel = sanitizeString(data.patient.activityLevel).toLowerCase();\n  if (data.patient.tobaccoUse) data.patient.tobaccoUse = sanitizeString(data.patient.tobaccoUse).toLowerCase();\n  if (data.patient.alcoholUse) data.patient.alcoholUse = sanitizeString(data.patient.alcoholUse).toLowerCase();\n  if (data.patient.mentalHealth) data.patient.mentalHealth = sanitizeString(data.patient.mentalHealth).toLowerCase();\n}\n\n// Process form data\nif (data.form) {\n  data.form.formType = sanitizeString(data.form.formType).toLowerCase();\n  data.form.category = sanitizeString(data.form.category).toLowerCase();\n  data.form.screener = sanitizeString(data.form.screener);\n  if (data.form.screenerData) data.form.screenerData = sanitizeString(data.form.screenerData);\n  if (data.form.formVersion) data.form.formVersion = sanitizeString(data.form.formVersion);\n}\n\n// Process clinic data\nif (data.clinic) {\n  data.clinic.name = sanitizeString(data.clinic.name);\n  data.clinic.id = sanitizeString(data.clinic.id);\n  data.clinic.email = sanitizeString(data.clinic.email).toLowerCase();\n  data.clinic.phone = sanitizeString(data.clinic.phone);\n}\n\n// Add validation flags\nconst validationResults = {\n  emailValid: isValidEmail(data.contact?.email || ''),\n  dateValid: isValidDate(data.contact?.dateOfBirth || ''),\n  phoneValid: isValidPhone(data.contact?.phone || ''),\n  clinicEmailValid: isValidEmail(data.clinic?.email || ''),\n  clinicPhoneValid: isValidPhone(data.clinic?.phone || '')\n};\n\n// Add processing metadata\nconst processedData = {\n  ...data,\n  processingMetadata: {\n    processedAt: new Date().toISOString(),\n    validationResults,\n    sanitized: true\n  }\n};\n\nreturn { json: processedData };"
      },
      "id": "data-sanitization",
      "name": "Data Sanitization",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "email-valid",
              "leftValue": "={{ $json.processingMetadata.validationResults.emailValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "date-valid",
              "leftValue": "={{ $json.processingMetadata.validationResults.dateValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "phone-valid",
              "leftValue": "={{ $json.processingMetadata.validationResults.phoneValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "format-validation",
      "name": "Format Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Data Format Invalid\", \"message\": \"Invalid data format detected\", \"validationErrors\": {{ $json.processingMetadata.validationResults }}, \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 422
        }
      },
      "id": "format-error-response",
      "name": "Format Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate unique patient ID and prepare data for processing\nconst data = $input.first().json;\n\n// Generate unique identifiers\nconst patientId = `PAT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst contactId = `CONT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst submissionId = `SUB_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Ensure patient and contact IDs are set\nif (!data.patient) data.patient = {};\nif (!data.patient.patientId) data.patient.patientId = patientId;\nif (!data.patient.contactId) data.patient.contactId = contactId;\n\n// Add submission tracking\nconst processedData = {\n  ...data,\n  submissionId,\n  processingMetadata: {\n    ...data.processingMetadata,\n    patientId,\n    contactId,\n    submissionId,\n    processedAt: new Date().toISOString()\n  }\n};\n\nreturn { json: processedData };"
      },
      "id": "generate-ids",
      "name": "Generate IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "url": "={{ $json.clinic?.email || 'admin@locumtele.com' }}",
        "subject": "New Patient Screening Submission - {{ $json.contact?.name || 'Unknown' }}",
        "message": "=New patient screening submission received:\n\nPatient: {{ $json.contact?.name }}\nEmail: {{ $json.contact?.email }}\nPhone: {{ $json.contact?.phone }}\nCategory: {{ $json.form?.category }}\nScreener: {{ $json.form?.screener }}\nClinic: {{ $json.clinic?.name }}\nSubmission ID: {{ $json.submissionId }}\nTimestamp: {{ $json.processingMetadata?.processedAt }}\n\nPlease review the submission in your dashboard.",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-notification",
      "name": "Send Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "patient_submissions",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "submission_id": "={{ $json.submissionId }}",
            "patient_id": "={{ $json.patient.patientId }}",
            "contact_id": "={{ $json.patient.contactId }}",
            "patient_name": "={{ $json.contact.name }}",
            "patient_email": "={{ $json.contact.email }}",
            "patient_phone": "={{ $json.contact.phone }}",
            "patient_gender": "={{ $json.contact.gender }}",
            "patient_dob": "={{ $json.contact.dateOfBirth }}",
            "form_category": "={{ $json.form.category }}",
            "form_screener": "={{ $json.form.screener }}",
            "form_type": "={{ $json.form.formType }}",
            "clinic_name": "={{ $json.clinic.name }}",
            "clinic_id": "={{ $json.clinic.id }}",
            "clinic_email": "={{ $json.clinic.email }}",
            "screener_data": "={{ $json.form.screenerData }}",
            "raw_data": "={{ JSON.stringify($json) }}",
            "processed_at": "={{ $json.processingMetadata.processedAt }}",
            "status": "submitted"
          }
        },
        "options": {}
      },
      "id": "store-submission",
      "name": "Store Submission",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectUrl": "={{ 'https://locumtele.com/consult?category=' + $json.form.category + '&locationId=' + $json.clinic.id + '&submissionId=' + $json.submissionId }}",
        "options": {
          "responseCode": 302
        }
      },
      "id": "success-redirect",
      "name": "Success Redirect",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Database Error\", \"message\": \"Failed to store submission\", \"submissionId\": \"{{ $json.submissionId }}\", \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "database-error-response",
      "name": "Database Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Notification Error\", \"message\": \"Failed to send notification\", \"submissionId\": \"{{ $json.submissionId }}\", \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "notification-error-response",
      "name": "Notification Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Rate Limit Exceeded\", \"message\": \"Too many requests. Please try again later.\", \"retryAfter\": 60, \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 429
        }
      },
      "id": "rate-limit-response",
      "name": "Rate Limit Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Internal Server Error\", \"message\": \"An unexpected error occurred\", \"submissionId\": \"{{ $json.submissionId || 'unknown' }}\", \"timestamp\": \"{{ new Date().toISOString() }}\" } }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "general-error-response",
      "name": "General Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 500]
    },
    {
      "parameters": {
        "jsCode": "// Error logging and monitoring\nconst error = $input.first().json;\n\n// Log error details\nconsole.error('Patient Forms API Error:', {\n  error: error.error,\n  message: error.message,\n  submissionId: error.submissionId,\n  timestamp: error.timestamp,\n  stack: error.stack || 'No stack trace available'\n});\n\n// Send error notification to admin\nconst errorNotification = {\n  to: 'admin@locumtele.com',\n  subject: 'Patient Forms API Error Alert',\n  body: `Error in Patient Forms API:\n\nError: ${error.error}\nMessage: ${error.message}\nSubmission ID: ${error.submissionId || 'N/A'}\nTimestamp: ${error.timestamp}\n\nPlease investigate immediately.`\n};\n\nreturn { json: errorNotification };"
      },
      "id": "error-logging",
      "name": "Error Logging",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 600]
    },
    {
      "parameters": {
        "url": "admin@locumtele.com",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body }}",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-error-notification",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2000, 600]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Data Sanitization",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Missing Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Missing Fields": {
      "main": [
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Sanitization": {
      "main": [
        [
          {
            "node": "Format Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Validation": {
      "main": [
        [
          {
            "node": "Generate IDs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate IDs": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store Submission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Success Redirect",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notification Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Submission": {
      "main": [
        [
          {
            "node": "Success Redirect",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Database Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Database Error Response": {
      "main": [
        [
          {
            "node": "Error Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notification Error Response": {
      "main": [
        [
          {
            "node": "Error Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Response": {
      "main": [
        [
          {
            "node": "Error Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Error Response": {
      "main": [
        [
          {
            "node": "Error Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Logging": {
      "main": [
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-15T10:00:00.000Z",
      "updatedAt": "2025-01-15T10:00:00.000Z",
      "id": "patient-forms",
      "name": "Patient Forms"
    },
    {
      "createdAt": "2025-01-15T10:00:00.000Z",
      "updatedAt": "2025-01-15T10:00:00.000Z",
      "id": "error-handling",
      "name": "Error Handling"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-15T10:00:00.000Z",
  "versionId": "1"
}
